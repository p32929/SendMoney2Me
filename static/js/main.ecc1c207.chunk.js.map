{"version":3,"sources":["serviceWorker.js","Others/NodeFetchHelper.js","Others/OvermindHelper.js","Components/TopWelcomeMessages.js","Components/Items/OurListItem.js","Components/Whole.js","index.js"],"names":["Boolean","window","location","hostname","match","NodeFetchHelper","get","url","headers","callback","fetch","method","Headers","then","res","Promise","all","status","json","jsonData","console","log","post","body","JSON","stringify","put","deletee","useOvermind","createHook","overmind","createOvermind","state","countries","selectedIndex","actions","setCountried","setSelectedIndex","index","styles","topMessage","fontWeight","fontFamily","bottomMessage","textAlign","lineHeight","TopWelcomeMessages","Grid","style","paddingTop","paddingLeft","paddingRight","paddingBottom","container","item","xs","direction","alignItems","alignContent","Typography","variant","target","component","href","Hidden","smUp","avatar","height","width","desc","whiteSpace","OurListItem","props","marginBottom","sm","md","lg","xl","Paper","elevation","padding","justify","Avatar","src","logo","link","Button","marginTop","color","title","Whole","useEffect","data","FormControl","backgroundColor","InputLabel","filled","required","Select","onChange","e","parseInt","value","native","displayEmpty","aria-label","map","country","CircularProgress","options","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ecc1c207.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","//\r\nconst GET = \"GET\";\r\nconst POST = \"POST\";\r\nconst PUT = \"PUT\";\r\nconst DELETE = \"DELETE\";\r\n\r\n//\r\nexport class NodeFetchHelper {\r\n    static get = (url, headers, callback) => {\r\n        var status;\r\n        fetch(url, {\r\n            method: GET,\r\n            headers: new Headers({\r\n                ...headers,\r\n                \"Content-Type\": \"application/json\",\r\n            })\r\n        }).then(res => Promise.all([res.status, res.json()]))\r\n            .then(([status, jsonData]) => {\r\n                console.log(jsonData);\r\n                console.log(status);\r\n                callback(status, jsonData)\r\n            });\r\n    }\r\n\r\n    static post = (url, headers, body, callback) => {\r\n        fetch(url, {\r\n            method: POST,\r\n            headers: new Headers({\r\n                ...headers,\r\n                \"Content-Type\": \"application/json\",\r\n            }),\r\n            body: JSON.stringify({\r\n                ...body\r\n            })\r\n        }).then(res => Promise.all([res.status, res.json()]))\r\n            .then(([status, jsonData]) => {\r\n                console.log(jsonData);\r\n                console.log(status);\r\n                callback(status, jsonData)\r\n            });\r\n    }\r\n\r\n    static put = (url, headers, body, callback) => {\r\n        fetch(url, {\r\n            method: PUT,\r\n            headers: new Headers({\r\n                ...headers,\r\n                \"Content-Type\": \"application/json\",\r\n            }),\r\n            body: JSON.stringify({\r\n                ...body\r\n            })\r\n        }).then(res => Promise.all([res.status, res.json()]))\r\n            .then(([status, jsonData]) => {\r\n                console.log(jsonData);\r\n                console.log(status);\r\n                callback(status, jsonData)\r\n            });\r\n    }\r\n\r\n    static deletee = (url, headers, callback) => {\r\n        fetch(url, {\r\n            method: DELETE,\r\n            headers: new Headers({\r\n                ...headers,\r\n                \"Content-Type\": \"application/json\",\r\n            })\r\n        }).then(res => Promise.all([res.status, res.json()]))\r\n            .then(([status, jsonData]) => {\r\n                console.log(jsonData);\r\n                console.log(status);\r\n                callback(status, jsonData)\r\n            });\r\n    }\r\n}\r\n","// npm install overmind overmind-react\r\n// yarn add overmind overmind-react\r\n\r\nimport {createOvermind} from \"overmind\";\r\nimport {createHook} from \"overmind-react\";\r\nimport {NodeFetchHelper} from \"./NodeFetchHelper\";\r\n\r\nexport const useOvermind = createHook();\r\nexport const overmind = createOvermind({\r\n    state: {\r\n        countries: null,\r\n        selectedIndex: 0,\r\n    },\r\n    actions: {\r\n        setCountried({state}, countries) {\r\n            state.countries = countries\r\n        },\r\n        setSelectedIndex({state}, index) {\r\n            state.selectedIndex = index\r\n        },\r\n    }\r\n});\r\n","import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Hidden} from \"@material-ui/core\";\r\n\r\nconst styles = {\r\n    topMessage: {\r\n        fontWeight: 'bold',\r\n        fontFamily: 'auto',\r\n    },\r\n    bottomMessage: {\r\n        textAlign: 'center',\r\n        fontFamily: 'monospace',\r\n        lineHeight: 1,\r\n    }\r\n}\r\n\r\nconst TopWelcomeMessages = () => {\r\n\r\n    return (\r\n        <Grid style={{\r\n            paddingTop: 40,\r\n            paddingLeft: 20,\r\n            paddingRight: 20,\r\n            paddingBottom: 40,\r\n        }} container item xs direction='column' alignItems='center' alignContent='center'>\r\n\r\n            <Typography style={styles.topMessage} variant='h3'>\r\n                WELCOME\r\n            </Typography>\r\n\r\n            <Typography target=\"_blank\" component={'a'} href='https://github.com/p32929/SendMoney2Me'\r\n                        variant='subtitle1'\r\n                        style={styles.bottomMessage}>\r\n                click here to STAR/FORK it\r\n            </Typography>\r\n\r\n            <Typography variant='subtitle1' style={styles.bottomMessage}>\r\n                Send money directly to <Hidden smUp><br/></Hidden> <b>Fayaz Bin Salam</b>\r\n                <br/>\r\n                First select your country and it will show you list of available options to send the money\r\n            </Typography>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default TopWelcomeMessages;","import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Hidden} from \"@material-ui/core\";\r\n\r\nconst styles = {\r\n    avatar: {\r\n        height: 80,\r\n        width: 80\r\n    },\r\n    desc: {\r\n        whiteSpace: 'pre-line'\r\n    }\r\n}\r\n\r\nconst OurListItem = (props) => {\r\n    const {item} = props\r\n    return (\r\n        <Grid style={{marginBottom: 4}} item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n            <Paper elevation={4} style={{height: 'auto', padding: 16}}>\r\n                <Grid container direction='column' justify='center' alignContent='center' alignItems='center'>\r\n                    <Avatar variant='square' style={styles.avatar}\r\n                            src={item.logo}></Avatar>\r\n\r\n                    <Grid container direction='column' justify='flex-start'\r\n                          alignContent='flex-start'\r\n                          alignItems='flex-start'>\r\n                        <Typography style={styles.desc} variant='body1'>{item.desc || item.link}</Typography>\r\n                    </Grid>\r\n                    <Button style={{marginTop: 16}} target=\"_blank\"\r\n                            href={item.link} variant='outlined' color='primary'>Go to {item.title}</Button>\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default OurListItem;","import React, {useEffect} from 'react';\r\nimport {useOvermind} from '../Others/OvermindHelper'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TopWelcomeMessages from \"./TopWelcomeMessages\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport {NodeFetchHelper} from \"../Others/NodeFetchHelper\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport OurListItem from \"./Items/OurListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst Whole = (props) => {\r\n    const {actions, state} = useOvermind()\r\n    useEffect(() => {\r\n        if (!state.countries) {\r\n            NodeFetchHelper.get('https://api.npoint.io/4d142c7ac93099c77456', null, (status, data) => {\r\n                actions.setCountried(data)\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Grid style={{padding: 8}} container direction='column' justify='flex-start' alignContent='center'\r\n              alignItems='center'>\r\n\r\n            <TopWelcomeMessages/>\r\n\r\n            {\r\n                state.countries ?\r\n                    <FormControl style={{width: '90%', backgroundColor: 'transparent'}} variant=\"filled\">\r\n                        <InputLabel\r\n                            filled\r\n                            required>Select your country</InputLabel>\r\n                        <Select\r\n                            onChange={(e) => {\r\n                                var index = parseInt(e.target.value)\r\n                                actions.setSelectedIndex(index)\r\n                            }}\r\n                            style={{backgroundColor: 'transparent'}} native displayEmpty>\r\n                            <option aria-label=\"None\" value={0}/>\r\n                            {\r\n                                state.countries?.map((item, index) => {\r\n                                    return <option value={index + 1}>{item.country}</option>\r\n                                })\r\n                            }\r\n                        </Select>\r\n                    </FormControl>\r\n                    : <CircularProgress/>\r\n            }\r\n\r\n            {\r\n                state.selectedIndex > 0 && <Grid container style={{width: '90%', marginTop: 16}}>\r\n                    {\r\n                        state.countries[state.selectedIndex - 1].options.map((item, index) => {\r\n                            return <OurListItem item={item}/>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            }\r\n\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Whole;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"overmind-react\";\r\nimport {overmind} from './Others/OvermindHelper'\r\nimport Whole from \"./Components/Whole\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider value={overmind}>\r\n            <Whole/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}