{"version":3,"sources":["serviceWorker.js","Others/OvermindHelper.js","Others/GlobalMethods.js","Components/TopWelcomeMessages.js","Others/GlobalVariables.js","Components/Helpers/SvgHelper.js","Components/Items/OurListItem.js","Components/WholeThing.js","index.js"],"names":["Boolean","window","location","hostname","match","useOvermind","createHook","overmind","createOvermind","state","selectedIndex","actions","setSelectedIndex","index","GlobalMethods","margin","maxHeight","innerHeight","maxWidth","innerWidth","height","width","styles","topMessage","fontWeight","fontFamily","bottomMessage","textAlign","lineHeight","TopWelcomeMessages","Grid","style","paddingTop","paddingLeft","paddingRight","paddingBottom","container","item","xs","direction","alignItems","alignContent","Typography","variant","sendMoney","country","options","logo","title","desc","SvgHelper","props","size","path","viewBox","fill","primaryColor","d","parent","avatar","textContainer","marginTop","marginBottom","marginRight","overflow","fontSize","color","whiteSpace","OurListItem","sm","md","lg","xl","Paper","elevation","wrap","justify","Avatar","src","link","url","toString","includes","IconButton","display","flexDirection","alignSelf","target","href","padding","getLinkIcon","WholeThing","getContainerHeight","backgroundColor","justifyContent","justifyItems","justifySelf","FormControl","InputLabel","filled","required","Select","onChange","e","parseInt","value","native","displayEmpty","aria-label","map","theme","createMuiTheme","typography","useNextVariants","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.592c4b11.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// npm install overmind overmind-react\r\n// yarn add overmind overmind-react\r\n\r\nimport {createOvermind} from \"overmind\";\r\nimport {createHook} from \"overmind-react\";\r\n\r\nexport const useOvermind = createHook();\r\nexport const overmind = createOvermind({\r\n    state: {\r\n        selectedIndex: 0,\r\n    },\r\n    actions: {\r\n        setSelectedIndex({state}, index) {\r\n            state.selectedIndex = index\r\n        },\r\n\r\n    }\r\n});\r\n","//\r\nimport React from \"react\";\r\n\r\nexport class GlobalMethods {\r\n    static getContainerHeight(margin = 0) {\r\n        return {\r\n            maxHeight: window.innerHeight,\r\n            maxWidth: window.innerWidth - margin,\r\n            height: window.innerHeight,\r\n            width: window.innerWidth - margin\r\n        }\r\n    }\r\n}\r\n\r\nexport const getBoldedStyle = (string) => {\r\n    return <p style={{fontWeight: \"bold\"}}>{string}</p>\r\n}\r\n","import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst styles = {\r\n    topMessage: {\r\n        fontWeight: 'bold',\r\n        fontFamily: 'auto',\r\n    },\r\n    bottomMessage: {\r\n        textAlign: 'center',\r\n        fontFamily: 'monospace',\r\n        lineHeight: 1,\r\n    }\r\n}\r\n\r\nconst TopWelcomeMessages = () => {\r\n\r\n    return (\r\n        <Grid style={{\r\n            paddingTop: 40,\r\n            paddingLeft: 20,\r\n            paddingRight: 20,\r\n            paddingBottom: 40,\r\n        }} container item xs direction='column' alignItems='center' alignContent='center'>\r\n\r\n            <Typography style={styles.topMessage} variant='h3'>\r\n                WELCOME\r\n            </Typography>\r\n\r\n            <Typography variant='subtitle1' style={styles.bottomMessage}>\r\n                Send money directly to <b>Fayaz Bin Salam</b>\r\n                <br/>\r\n                First select your country and it will show you list of available options to send the money\r\n            </Typography>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default TopWelcomeMessages;\r\n","export const sendMoney = [\r\n    {\r\n        country: \"Bangladesh\",\r\n        options: [\r\n            {\r\n                logo: 'https://www.logo.wine/a/logo/BKash/BKash-Icon-Logo.wine.svg',\r\n                title: 'bKash',\r\n                desc: `Account number: 01796306262`\r\n            },\r\n            {\r\n                logo: 'https://user-images.githubusercontent.com/6418354/85701466-3d533380-b6ff-11ea-9501-5463bea9bca1.png',\r\n                title: 'EXIM Bank',\r\n                desc: `Account Holder Name: FAYAZ BIN SALAM\r\n                Bank Name: EXIM Bank\r\n                Branch Name: Banani Branch\r\n                Account Number: 06112100087615\r\n                SWIFT code: EXBKBDDH`\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        country: \"Other countries\",\r\n        options: [\r\n            {\r\n                logo: 'https://user-images.githubusercontent.com/6418354/85705970-90c78080-b703-11ea-990f-3b4bc01e57cc.png',\r\n                title: 'XOOM',\r\n                desc: `You can transfer the money to my bank account via XOOM or any service that you trust\r\n                \r\n                My bank information:\r\n                \r\n                Account Holder Name: FAYAZ BIN SALAM\r\n                Bank Name: EXIM Bank\r\n                Branch Name: Banani Branch\r\n                Account Number: 06112100087615\r\n                SWIFT code: EXBKBDDH\r\n                \r\n                EXIM Bank is also written \"Export Import Bank Ltd\"\r\n                `\r\n            }\r\n        ]\r\n    },\r\n]\r\n","import React from 'react';\r\nimport {useOvermind} from \"../../Others/OvermindHelper\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst SvgHelper = props => {\r\n    const {state, actions} = useOvermind()\r\n    const {size = 48, path, styles = {}} = props;\r\n\r\n    return (\r\n        <svg style={{width: size, height: size, ...styles}} viewBox=\"0 0 24 24\">\r\n            <path fill={state.primaryColor}\r\n                  d={path}/>\r\n        </svg>\r\n    );\r\n};\r\n\r\nSvgHelper.propTypes = {\r\n    size: PropTypes.number,\r\n    path: PropTypes.string,\r\n    styles: PropTypes.object\r\n};\r\n\r\nexport default SvgHelper;\r\n","import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {useOvermind} from \"../../Others/OvermindHelper\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SvgHelper from \"../Helpers/SvgHelper\";\r\n\r\nconst linkIcon = 'M10.59,13.41C11,13.8 11,14.44 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C7.22,12.88 7.22,9.71 9.17,7.76V7.76L12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.59,9.17C9.41,10.34 9.41,12.24 10.59,13.41M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.78,11.12 16.78,14.29 14.83,16.24V16.24L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L13.41,14.83C14.59,13.66 14.59,11.76 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z'\r\nconst giftIcon = 'https://image.flaticon.com/icons/svg/1867/1867817.svg'\r\n\r\nconst styles = {\r\n    parent: {\r\n        margin: 2,\r\n    },\r\n    avatar: {\r\n        margin: 16,\r\n    },\r\n    textContainer: {\r\n        marginTop: 16,\r\n        marginBottom: 16,\r\n        marginRight: 16,\r\n        overflow: 'hidden',\r\n    },\r\n    title: {\r\n        fontSize: 16,\r\n        color: \"#212121\",\r\n        lineHeight: 1.25\r\n    },\r\n    desc: {\r\n        fontSize: 14,\r\n        color: \"#757575\",\r\n        lineHeight: 1.25,\r\n        overflow: 'hidden',\r\n        whiteSpace: 'pre-line'\r\n    }\r\n}\r\n\r\nfunction getLinkIcon(url) {\r\n    if (url) {\r\n        if (url.toString().includes('http')) {\r\n            return <IconButton style={{display: 'flex', flexDirection: 'column', alignSelf: 'center'}} target=\"_blank\"\r\n                               href={url}\r\n                               size='small'>\r\n                <SvgHelper\r\n                    path={linkIcon}\r\n                    styles={{padding: 8}}\r\n                    size={36}/>\r\n            </IconButton>\r\n        }\r\n    }\r\n    return;\r\n}\r\n\r\nconst OurListItem = (props) => {\r\n    const {state, actions} = useOvermind()\r\n    var {item} = props;\r\n\r\n    return (\r\n        <Grid style={{width: '90%'}} item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n            <Paper elevation={4} style={{height: 'auto', ...styles.parent}}>\r\n                <Grid container wrap=\"nowrap\" direction='row' justify='center'>\r\n                    <Grid item>\r\n                        <Avatar variant='square' style={styles.avatar}\r\n                                src={item.logo}></Avatar>\r\n                    </Grid>\r\n                    <Grid item xs style={styles.textContainer} container justify='center' direction='column'>\r\n                        <Typography style={styles.title}>{item.title}</Typography>\r\n                        <Typography style={styles.desc}>{item.desc || item.link}</Typography>\r\n                    </Grid>\r\n                    {\r\n                        getLinkIcon(item.link)\r\n                    }\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default OurListItem;\r\n","import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {useOvermind} from \"../Others/OvermindHelper\";\r\nimport {GlobalMethods} from \"../Others/GlobalMethods\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport TopWelcomeMessages from \"./TopWelcomeMessages\";\r\nimport {sendMoney} from '../Others/GlobalVariables'\r\nimport OurListItem from \"./Items/OurListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst styles = {\r\n    container: {\r\n        ...GlobalMethods.getContainerHeight(),\r\n        backgroundColor: \"#2196F3\",\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        alignContent: 'center',\r\n        justify: 'center',\r\n        justifyContent: 'center',\r\n        justifyItems: 'center',\r\n        justifySelf: 'center'\r\n    },\r\n}\r\n\r\nconst WholeThing = () => {\r\n    const {state, actions} = useOvermind()\r\n\r\n    return (\r\n        <Grid style={{padding: 8}} container direction='column' justify='flex-start' alignContent='center' alignItems='center'>\r\n            <TopWelcomeMessages/>\r\n            <FormControl style={{width: '90%', backgroundColor: 'transparent'}} variant=\"filled\">\r\n                <InputLabel\r\n                    filled\r\n                    required>Select your country</InputLabel>\r\n                <Select\r\n                    onChange={(e) => {\r\n                        var index = parseInt(e.target.value)\r\n                        actions.setSelectedIndex(index)\r\n                    }}\r\n                    style={{backgroundColor: 'transparent'}} native displayEmpty>\r\n                    <option aria-label=\"None\" value={0}/>\r\n                    {\r\n                        sendMoney.map((item, index) => {\r\n                            return <option value={index + 1}>{item.country}</option>\r\n                        })\r\n                    }\r\n                </Select>\r\n            </FormControl>\r\n\r\n            {\r\n                state.selectedIndex > 0 && <Grid container style={{width: '90%', marginTop: 16}}>\r\n                    <Typography style={{color: \"#757575\", fontSize: 10}} variant='overline'>_#_ Available\r\n                        options</Typography>\r\n                    {\r\n                        sendMoney[state.selectedIndex - 1].options.map((item, index) => {\r\n                            return <OurListItem item={item}/>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            }\r\n\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default WholeThing;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"overmind-react\";\nimport {overmind} from './Others/OvermindHelper'\nimport WholeThing from \"./Components/WholeThing\";\n\nimport {createMuiTheme, MuiThemeProvider} from '@material-ui/core';\n\nconst theme = createMuiTheme({\n    typography: {\n        useNextVariants: true,\n        fontFamily: `'Montserrat', sans-serif`,\n    },\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <MuiThemeProvider theme={theme}>\n            <Provider value={overmind}>\n                <WholeThing/>\n            </Provider>\n        </MuiThemeProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}